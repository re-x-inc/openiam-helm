apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.openiam.appname }}-janusgraph
  labels:
    openiam_collect_logs: 'true'
{{ include "labels.standard" . | indent 4 }}
spec:
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ .Values.openiam.appname }}-janusgraph
  serviceName: {{ .Values.openiam.appname }}-janusgraph
  replicas: {{ required "openiam.gremlin.replicas is required" .Values.openiam.gremlin.replicas }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
      {{- if .Values.openiam.gremlin.podAnnotations }}
{{ toYaml .Values.openiam.gremlin.podAnnotations | indent 8 }}
      {{- end }}
      labels:
        release: {{ .Release.Name }}
        app: {{ .Values.openiam.appname }}-janusgraph
        openiam_collect_logs: 'true'
        {{- range $key, $value := .Values.openiam.gremlin.labels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      {{- if .Values.openiam.gremlin.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.openiam.gremlin.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.openiam.gremlin.hostAliases }}
      hostAliases:
{{ toYaml .Values.openiam.gremlin.hostAliases | indent 8 }}
      {{- end }}
      {{- if .Values.openiam.gremlin.tolerations }}
      tolerations:
{{ toYaml .Values.openiam.gremlin.tolerations | indent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Values.openiam.appname }}-janusgraph
            topologyKey: "kubernetes.io/hostname"
      imagePullSecrets:
      - name: gremlinregistrykey
      containers:
      - name: janusgraph
        image: "{{ .Values.openiam.image.registry }}{{ .Values.openiam.image.registryPrefixSeparator }}{{ .Values.openiam.image.prefix }}/janusgraph:{{ .Values.openiam.image.version }}-{{ .Values.openiam.image.environment }}"
        imagePullPolicy: {{ .Values.openiam.image.pullPolicy }}
        env:
        - name: TZ
          value: {{ .Values.openiam.timezone | quote }}
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        - name: OPENIAM_LOG_LEVEL
          value: {{ .Values.openiam.bash.log.level }}
        - name: "ADDITIONAL_JAVA_OPTIONS"
          value: "{{ .Values.openiam.gremlin.additionalJavaOpts }}"
#        - name: "janusgraph.storage.batch-loading"
#          value: "true"
#        - name: "graph.replace-instance-if-exists"
#          value: "true"
        - name: "janusgraph.graph.replace-instance-if-exists"
          value: "true"
        - name: "janusgraph.cache.db-cache"
          value: "true"
        - name: "janusgraph.graph.replace-instance-if-exists"
          value: "true"
        - name: "janusgraph.evaluationTimeout"
          value: "60000"
        - name: "gremlinserver.evaluationTimeout"
          value: "60000"
        - name: "janusgraph.query.batch"
          value: "true"
        - name: "janusgraph.query.limit-batch-size"
          value: "false"
        - name: "janusgraph.maxContentLength"
          value: "655360"
        - name: "gremlinserver.maxContentLength"
          value: "655360"
        - name: "janusgraph.cache.db-cache-time"
          value: "300000"
        - name: "janusgraph.cache.db-cache-size"
          value: "0.5"
        - name: "janusgraph.cache.tx-cache-size"
          value: "40000"
        - name: "janusgraph.index.search.backend"
          value: "elasticsearch"
        - name: "janusgraph.index.search.hostname"
          value: "{{ .Values.openiam_opensearch.opensearch.host}}:{{.Values.openiam_opensearch.opensearch.port}}"
        - name: "janusgraph.index.search.elasticsearch.ssl.enabled"
          value: "true"
        - name: "janusgraph.index.search.elasticsearch.ssl.disable-hostname-verification"
          value: "true"
        - name: "janusgraph.index.search.elasticsearch.ssl.allow-self-signed-certificates"
          value: "true"
        - name: "janusgraph.index.search.elasticsearch.http.auth.type"
          value: "basic"
        - name: "janusgraph.index.search.elasticsearch.http.auth.basic.username"
          valueFrom:
            secretKeyRef:
              key: opensearchUserName
              name: secrets
        - name: "janusgraph.index.search.elasticsearch.http.auth.basic.password"
          valueFrom:
            secretKeyRef:
              key: opensearchPassword
              name: secrets
        - name: OPENSEARCH_PROTOCOL
          value: {{ .Values.openiam_opensearch.opensearch.protocol | quote }}
        - name: OPENSEARCH_HOST
          value: {{ .Values.openiam_opensearch.opensearch.host | quote }}
        - name: OPENSEARCH_PORT
          value: {{ .Values.openiam_opensearch.opensearch.port | quote }}
{{- if or (eq .Values.openiam.cloud_provider "gke") }}
        - name: "janusgraph.storage.backend"
          value: "hbase"
        - name: "janusgraph.storage.hbase.ext.hbase.client.connection.impl"
          value: "com.google.cloud.bigtable.hbase2_x.BigtableConnection"
        - name: "janusgraph.storage.hbase.ext.google.bigtable.project.id"
          value: {{ .Values.openiam.gke.project.id | quote }}
        - name: "janusgraph.storage.hbase.ext.google.bigtable.instance.id"
          value: {{ .Values.openiam.hbase.ext.google.bigtable.instance.id | quote }}
        - name: "GOOGLE_APPLICATION_CREDENTIALS"
          value: "/data/openiam/conf/gcloud/gcloud.creds.json"
{{- end }}
{{- if eq .Values.openiam.cloud_provider "helm" }}
        - name: "janusgraph.storage.backend"
          value: {{ .Values.openiam.backend.type | quote }}
        - name: "janusgraph.storage.hostname"
          value: {{ .Values.openiam.backend.host | quote }}
        - name: HBASE_HOST
          value: {{ .Values.openiam.backend.host | quote }}
        - name: WAIT_FOR_IT_URL
          value: {{ .Values.openiam.backend.host | quote }}
        - name: WAIT_FOR_IT_PORT
          value: {{ .Values.openiam.backend.port | quote }}
{{- if eq .Values.openiam.backend.type "cql" }}
        - name: "janusgraph.storage.cql.only-use-local-consistency-for-system-operations"
          value: "true"
        - name: "janusgraph.storage.cassandra.read-consistency-level"
          value: "ONE"
        - name: "janusgraph.storage.cassandra.write-consistency-level"
          value: "ALL"
        - name: "janusgraph.storage.cql.read-consistency-level"
          value: "ONE"
        - name: "janusgraph.storage.cql.write-consistency-level"
          value: "ALL"
        - name: "janusgraph.storage.username"
          value: "cassandra"
        - name: "janusgraph.storage.password"
          valueFrom:
            secretKeyRef:
              key: cassandraPassword
              name: secrets
{{- end }}
{{- end }}
        readinessProbe:
          exec:
            command: ['/bin/sh', '-c', '(healthcheck.sh 120 && exit 0) || exit 1']
          initialDelaySeconds: 120
          timeoutSeconds: 120
          periodSeconds: 60
          failureThreshold: 6
        livenessProbe:
          exec:
            command: ['/bin/sh', '-c', '(healthcheck.sh 120 && exit 0) || exit 1']
          initialDelaySeconds: 120
          timeoutSeconds: 120
          periodSeconds: 60
          failureThreshold: 6
{{- if eq .Values.openiam.cloud_provider "gke" }}
        volumeMounts:
        - mountPath: /data/openiam/conf/gcloud
          name: gcloud-config
{{- end }}
        resources:
{{ toYaml .Values.openiam.gremlin.resources | indent 10 }}
{{- if eq .Values.openiam.cloud_provider "gke" }}
      volumes:
      - name: gcloud-config
        configMap:
          name: gcloud-config
{{- end }}
